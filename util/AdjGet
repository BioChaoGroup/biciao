#!/usr/bin/env perl
# (c) 2016 - 2020 Chao IN-HORSE SHARE ONLY
# ===================================================================
# Description:       Find the adj graph acrossing beads
# Author:            Chao<fangchao@genomics.cn>
# Created Date:      20 Mar 2020
# ===================================================================
# see detail below
use strict;
use Getopt::Long qw(:config no_ignore_case); # For case sensitive

sub usage {
  my $msg = shift;
  print <<USAGE;
$msg
usage:
  $0 -i input -o output -r ref.bed
    -i  input fasta file
    -u  read bead to bead info from uc file if sequence were clustered
    -m  blast 6 format alignment file
    -k  minimum kmers of overlape zone
    -o  output beads stat annotation
    -c  output clips best annotation
    -v  verbose
    -h  show help info
USAGE
}
&usage && exit unless @ARGV;

our ($stime,$m6,$kmer,$fa,$uc,$out,$clip,$covf,$verbose,$help)=(time(),);
GetOptions(
  "i:s" => \$fa,
  "u:s" => \$uc,
  "m:s" => \$m6,
  "k:i" => \$kmer,
  "o:s" => \$out,
  "c:s" => \$clip,
  "g:s" => \$covf,
  "v" => \$verbose,
  "h|help|?" => \$help,
);
$kmer||=31;
&usage && exit if $help;

our(%SEQ,%LINK,%DIST,%CLUST,%vertex);
open FA, ($fa)?"<$fa":"< -" or die $!;
open M6, "<$m6" or die $!;
open DOT,">$out.dot" or die $!;
open PATH,">$out.path" or die $!;
open SEQ,">$out.merge.fa" or die $!;

&verbose("AdjGet start.\nRading fasta ... ");
while(<FA>){
  chomp;
  my @s =split " |\t|>", $_;
  chomp(my $seq = <FA>);
  $SEQ{"$s[1]"} = $seq;
}
close FA;
&verbose("done.\nReading m6 and generating dot ... ");
#Account dist if spefic uc file:
if($uc){
  open UC, "<$uc" or die $!;
  while(<UC>){
    next unless $_ =~ /^H/;
    my @s = split;
    $s[8] =~ /(BI\d+)/; my $mBI = $1;
    $s[9] =~ /(BI\d+)/; my $cBI = $1;
    $DIST{$mBI}{$cBI}{D} -= $s[3]; $DIST{$mBI}{$cBI}{C} ++;
    $DIST{$cBI}{$mBI}{D} -= $s[3]; $DIST{$cBI}{$mBI}{C} ++;
    # save cluster info
    $CLUST{$s[9]}{$s[8]}{B} = $mBI;
    # Get left cigar
    my ($mLen,$fLen,$mode);
    if($s[7] =~ s/^(\d+[DI])//){
      ($mLen,$fLen,$mode) = &cigarLen($1);
    }else{
      ($mLen,$fLen,$mode) = (0,0,"I");
    }
    $CLUST{$s[9]}{$s[8]}{P} = ($mode eq "I")?($fLen):0; #count from ZERO.
    # Remove right
    $s[7] =~ s/(\d+[DI])$//;
    # Get aligned length
    ($mLen,$fLen,$mode) = &cigarLen($s[7]);
    $CLUST{$s[9]}{$s[8]}{L} = $fLen;
    $CLUST{$s[9]}{$s[8]}{R} = $s[3];
    $CLUST{$s[9]}{$s[8]}{S} = $s[4];
  }
}
close UC;
#Generating graph
print DOT "digraph g {\n";
while(<M6>){
  chomp;
  my @s=split;
  my $std=($s[9]>$s[8])?"+":"-";
  my $rcs=($std eq "+")?"-":"+";
  my($sLeft,$sRight)=($std eq "+")?($s[8],$s[9]):($s[9],$s[8]);
  my($qTipL,$qTipR,$sTipL,$sTipR) = ($s[6]-1,$s[12]-$s[7],$sLeft-1,$s[13]-$sRight);
  my($sTipI,$sTipO) = ($std eq "+")?($sTipR,$sTipL):($sTipL,$sTipR);
  next if $s[3] < $kmer;
  $s[0] =~ /(BI\d+)/; my $qBI = $1;
  $s[1] =~ /(BI\d+)/; my $sBI = $1;

  if($qTipL<5&&$qTipR>48&&$sTipI<5&&$sTipO>48){
    # left to right
    #      L~|6------7------>  query   +  #       L~|6-----7-------> query   +
    # --------8----->9|~R      subject +  # <--------8-----9|~L      subject -
    print DOT "\"$s[1]$std\" -> \"$s[0]+\" [d=-$s[3]]\n";
    $LINK{$s[1]}{$std}{$s[0]}{S} = "+";
    $LINK{$s[1]}{$std}{$s[0]}{D} = $s[3];
    $LINK{$s[1]}{$std}{$s[0]}{1} = ($std eq "+")?$sTipR:$sTipL;
    $LINK{$s[1]}{$std}{$s[0]}{2} = $qTipL;
    #reverse
    $LINK{$s[0]}{"-"}{$s[1]}{S} = $rcs;
    $LINK{$s[0]}{"-"}{$s[1]}{D} = $s[3];
    $LINK{$s[0]}{"-"}{$s[1]}{1} = $qTipL;
    $LINK{$s[0]}{"-"}{$s[1]}{2} = ($std eq "+")?$sTipR:$sTipL;;
    #
    $DIST{$qBI}{$sBI}{D} -= $s[3]; $DIST{$qBI}{$sBI}{C} ++;
    $DIST{$sBI}{$qBI}{D} -= $s[3]; $DIST{$sBI}{$qBI}{C} ++;
  }elsif($qTipR<5&&$qTipL>48&&$sTipO<5&&$sTipI>48){
    # right to left
    # -----6------>7|~    query   + #  ----6---->7|~     query   +
    #   L~|8-------9----> subject + #   R~|8<----9------ subject -
    my $overlap = $s[13] - $s[9] - $qTipR;
    print DOT "\"$s[0]+\" -> \"$s[1]$std\" [d=-$s[3]]\n";
    $LINK{$s[0]}{"+"}{$s[1]}{S} = $std;
    $LINK{$s[0]}{"+"}{$s[1]}{D} = $s[3];
    $LINK{$s[0]}{"+"}{$s[1]}{1} = $qTipR;
    $LINK{$s[0]}{"+"}{$s[1]}{2} = ($std eq "+")?$sTipL:$sTipR;
    #reverse
    print DOT "\"$s[1]$rcs\" -> \"$s[0]-\" [d=-$s[3]]\n";
    $LINK{$s[1]}{$rcs}{$s[0]}{S} = "-";
    $LINK{$s[1]}{$rcs}{$s[0]}{D} = $s[3];
    $LINK{$s[1]}{$rcs}{$s[0]}{1} = ($std eq "+")?$sTipL:$sTipR;
    $LINK{$s[1]}{$rcs}{$s[0]}{2} = $qTipR;
    #
    $DIST{$qBI}{$sBI}{D} -= $s[3]; $DIST{$qBI}{$sBI}{C} ++;
    $DIST{$sBI}{$qBI}{D} -= $s[3]; $DIST{$sBI}{$qBI}{C} ++;
  }

  $vertex{"$s[0]"} ||= $s[12];
  $vertex{"$s[1]"} ||= $s[13];
}
print DOT "}\n";
close DOT;


&verbose("done.\nGenerating path and merging sequence:\n");
#get path
our ($pid,%PATH)=(0,);
my ($std, $rcs) = ("+","-");
&verbose("\nstart searching $std sense:\n");
foreach my $v (sort keys %vertex){
  if(not exists $LINK{$v}{$rcs}){
    my ($vi,$count,$len,$tip2,$path,$seq,$pos) = ($v,1,0,0,"$v$std","",0);
    $vi =~ /(BI\d+)/; my $qBI = $1;
    my %NODES = ($vi => 1);
    $PATH{$v}{PATH}{$v}{P} = 0;
    # sort by tips
    my @next = sort { $LINK{$vi}{$std}{$a}{2} <=> $LINK{$vi}{$std}{$b}{2} } keys %{$LINK{$vi}{$std}};
    while(exists @next){
      my @nexti = @next; @next=();

      $PATH{$v}{BEAD}{$qBI}{$pos}{N} = $vi;
      $PATH{$v}{BEAD}{$qBI}{$pos}{L} = $vertex{$vi} - $tip2 - $LINK{$vi}{$std}{$next[0]}{1};

      for (my $s=0;$s<@next;$i++){
        my $vj = $next[$s];
        if(exists $NODES{$vj}){
          &verbose("Repeat nodes found. It will cause loopping. Discard.\n");

        }
        #
        my $seqi = ($std eq "+")?$SEQ{$vi}:&xDNA("rc",$SEQ{$vi});
        my $leni = $vertex{$vi} - $tip2 - $LINK{$vi}{$std}{$vj}{1} ;
        my $seqi_remove_tips .= substr($seqi,$tip2,$leni);
        my $posi = $PATH{$v}{PATH}{$v}{P};
        #For the smallest tip
        if($s == 0){
          for(my $i = 0;$i<$leni;$i++){ $PATH{$v}{SEQ}{substr($seqi_remove_tips,$posi+$i,1)} ++;}
        }
        for(my $i = 0;$i<$leni;$i++){ $PATH{$v}{PATH}{$vi}{SEQ}{substr($seqi_remove_tips,$i,1)} = 1; }

        push @next, keys $LINK{$vj}{$std};
        $NODES{$vj} ++;
      }
        #
    }
    next if $count < 2;
    &verbose(" $vi$std,$tip2,$vertex{$vi}\n");
    $len += $vertex{$vi} - $tip2;
    $seq .= substr(($std eq "+")?$SEQ{$vi}:&xDNA("rc",$SEQ{$vi}),$tip2);
    $pid ++;
    print SEQ ">$pid $len $path\n$seq\n";
    print PATH "$pid\t$len\t$path\n";
    &verbose("found merged sequence up to $pid\n");
    #reset sense:
    ($rcs,$std) = &dPN($rcs);
  }
}
close PATH;
close SEQ;
&verbose("found merged sequence up to $pid ... done.\nAdjGet DONE!\n");
exit;

################################################################################
# sub
################################################################################
sub dPN{
  my $i = shift;
  my $o = ($i eq "+")?"-":"+";
  return($i,$o);
}

sub topOverlapped{
  my $qCI = shift;
  my @sCIs= @_;
  $qCI =~ /(BI\d+)/;
  my $qBI = $1;
  my %MIN=("D"=>0,"B"=>"","C"=>"");
  for(my $i=0;$i<@sCIs;$i++){
    $sCIs[$i] =~ /(BI\d+)/;
    my $sBI = $1;
    if($DIST{$qBI}{$sBI}{D} < $MIN{D}){
      if($sBI eq $MIN{B}){
        die "Nodes from same BB: $sCIs[$i] and $MIN{C} !\n";
      }
      %MIN = ("D"=>$DIST{$qBI}{$sBI}{D}, "B"=>$sBI,"C"=>$sCIs[$i]);
    }
  }
  &verbose(" Found:($MIN{D} between $MIN{B} and $qBI),");
  return($MIN{C},$MIN{B});
}

sub xDNA{
  my %SH;
  my $mod = shift;
  my $str = shift;
  for(my $p=0;$p<length($str);$p++){
    my $pick = substr($str,$p,1);
    my $comp = ($pick eq "A")?"T":(($pick eq "T")?"A":(($pick eq "G")?"C":(($pick eq "C")?"G":$pick)));
    $SH{$p}{'raw'} = $pick;
    $SH{$p}{'com'} = $comp;
  }
  my $res = "";
  if($mod =~ /r/){
    foreach my $p (sort {$b<=>$a} %SH){
      $res .= ($mod =~/c/)?$SH{$p}{'com'}:$SH{$p}{'raw'};
    }
  }else{
    foreach my $p (sort {$a<=>$b} %SH){
      $res .= ($mod =~/c/)?$SH{$p}{'com'}:$SH{$p}{'raw'};
    }
  }
  return($res);
}

sub cigarLen{
	my $cigar =shift;
	my ($mLen,$fLen,%MODE) = (0,0,);
	while($cigar){
		$cigar =~ s/^(\d*)([MIDNSHP=X])//;
		my ($mode,$n) = ($2,$1);
		$n ||=1;
		if($mode =~/[MINP=X]/){$mLen += $n;}
		if($mode =~/[HSMINP=X]/){$fLen += $n;}
    $MODE{$mode} ++;
	}
  my $mode = join "", keys %MODE;
	return($mLen,$fLen,$mode);
}


sub verbose{
  my $msg = shift;
  print STDERR $msg if $verbose;
}


















#
